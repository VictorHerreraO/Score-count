name: Build Release APK

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write # Required for creating releases
  actions: read

jobs:
  build-release:
    name: Build & Publish Release APK
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for version detection

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses || true

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/scorecount-release.keystore

      - name: Build Release APK
        env:
          KEYSTORE_FILE: ${{ github.workspace }}/scorecount-release.keystore
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew assembleRelease --no-daemon --stacktrace

      - name: Get version name
        id: version
        run: |
          VERSION_NAME=$(./gradlew -q printVersionName | tail -1)
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION_NAME}"

      - name: Rename APK
        run: |
          VERSION_NAME="${{ steps.version.outputs.version_name }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          # Create descriptive filename
          APK_NAME="scorecount-v${VERSION_NAME}-${SHORT_SHA}.apk"

          mv app/build/outputs/apk/release/app-release.apk \
             app/build/outputs/apk/release/${APK_NAME}

          echo "apk_name=${APK_NAME}" >> $GITHUB_OUTPUT
          echo "apk_path=app/build/outputs/apk/release/${APK_NAME}" >> $GITHUB_OUTPUT
        id: rename

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-${{ steps.version.outputs.version_name }}
          path: ${{ steps.rename.outputs.apk_path }}
          retention-days: 30

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
        with:
          tag_name: v${{ steps.version.outputs.version_name }}
          name: Release v${{ steps.version.outputs.version_name }}
          body: |
            ## Release v${{ steps.version.outputs.version_name }}

            **Build Date**: ${{ github.event.head_commit.timestamp }}
            **Commit**: ${{ github.sha }}

            ### Changes
            ${{ github.event.head_commit.message }}

            ### Installation
            1. Download the APK below
            2. Enable "Install from Unknown Sources" on your Android device
            3. Install the APK

            ---
            ðŸ¤– Auto-generated release
          files: ${{ steps.rename.outputs.apk_path }}
          draft: false
          prerelease: false

      - name: Build Summary
        if: always()
        run: |
          echo "## ðŸš€ Release Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ steps.version.outputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**APK**: ${{ steps.rename.outputs.apk_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download from Actions artifacts or GitHub Releases." >> $GITHUB_STEP_SUMMARY

      - name: Cleanup Keystore
        if: always()
        run: rm -f ${{ github.workspace }}/scorecount-release.keystore
